// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Sources/Varioqub/Protobuf/requestProto.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct PBRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _id ?? String()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var userID: String {
    get {return _userID ?? String()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  /// maybe map<string, string> is better
  var clientFeatures: [PBClientFeature] = []

  /// used to filter by
  var sdkVersion: String {
    get {return _sdkVersion ?? String()}
    set {_sdkVersion = newValue}
  }
  /// Returns true if `sdkVersion` has been explicitly set.
  var hasSdkVersion: Bool {return self._sdkVersion != nil}
  /// Clears the value of `sdkVersion`. Subsequent reads from it will return its default value.
  mutating func clearSdkVersion() {self._sdkVersion = nil}

  /// used to filter by
  var platform: String {
    get {return _platform ?? String()}
    set {_platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  var hasPlatform: Bool {return self._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  mutating func clearPlatform() {self._platform = nil}

  /// used to filter by
  var version: String {
    get {return _version ?? String()}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  /// used to filter by
  var versionCode: String {
    get {return _versionCode ?? String()}
    set {_versionCode = newValue}
  }
  /// Returns true if `versionCode` has been explicitly set.
  var hasVersionCode: Bool {return self._versionCode != nil}
  /// Clears the value of `versionCode`. Subsequent reads from it will return its default value.
  mutating func clearVersionCode() {self._versionCode = nil}

  /// used to filter by
  var language: String {
    get {return _language ?? String()}
    set {_language = newValue}
  }
  /// Returns true if `language` has been explicitly set.
  var hasLanguage: Bool {return self._language != nil}
  /// Clears the value of `language`. Subsequent reads from it will return its default value.
  mutating func clearLanguage() {self._language = nil}

  /// used to split by
  var deviceID: String {
    get {return _deviceID ?? String()}
    set {_deviceID = newValue}
  }
  /// Returns true if `deviceID` has been explicitly set.
  var hasDeviceID: Bool {return self._deviceID != nil}
  /// Clears the value of `deviceID`. Subsequent reads from it will return its default value.
  mutating func clearDeviceID() {self._deviceID = nil}

  /// provide some diagnostics measurement
  var diagnostics: Dictionary<String,Double> = [:]

  /// used to filter by
  var osVersion: String {
    get {return _osVersion ?? String()}
    set {_osVersion = newValue}
  }
  /// Returns true if `osVersion` has been explicitly set.
  var hasOsVersion: Bool {return self._osVersion != nil}
  /// Clears the value of `osVersion`. Subsequent reads from it will return its default value.
  mutating func clearOsVersion() {self._osVersion = nil}

  /// used to filter by
  var osHumanVersion: String {
    get {return _osHumanVersion ?? String()}
    set {_osHumanVersion = newValue}
  }
  /// Returns true if `osHumanVersion` has been explicitly set.
  var hasOsHumanVersion: Bool {return self._osHumanVersion != nil}
  /// Clears the value of `osHumanVersion`. Subsequent reads from it will return its default value.
  mutating func clearOsHumanVersion() {self._osHumanVersion = nil}

  var sdkAdapterName: String {
    get {return _sdkAdapterName ?? String()}
    set {_sdkAdapterName = newValue}
  }
  /// Returns true if `sdkAdapterName` has been explicitly set.
  var hasSdkAdapterName: Bool {return self._sdkAdapterName != nil}
  /// Clears the value of `sdkAdapterName`. Subsequent reads from it will return its default value.
  mutating func clearSdkAdapterName() {self._sdkAdapterName = nil}

  var sdkIDAdapterName: String {
    get {return _sdkIDAdapterName ?? String()}
    set {_sdkIDAdapterName = newValue}
  }
  /// Returns true if `sdkIDAdapterName` has been explicitly set.
  var hasSdkIDAdapterName: Bool {return self._sdkIDAdapterName != nil}
  /// Clears the value of `sdkIDAdapterName`. Subsequent reads from it will return its default value.
  mutating func clearSdkIDAdapterName() {self._sdkIDAdapterName = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: String? = nil
  fileprivate var _userID: String? = nil
  fileprivate var _sdkVersion: String? = nil
  fileprivate var _platform: String? = nil
  fileprivate var _version: String? = nil
  fileprivate var _versionCode: String? = nil
  fileprivate var _language: String? = nil
  fileprivate var _deviceID: String? = nil
  fileprivate var _osVersion: String? = nil
  fileprivate var _osHumanVersion: String? = nil
  fileprivate var _sdkAdapterName: String? = nil
  fileprivate var _sdkIDAdapterName: String? = nil
}

struct PBClientFeature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var value: String {
    get {return _value ?? String()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _value: String? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension PBRequest: @unchecked Sendable {}
extension PBClientFeature: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "user_id"),
    3: .standard(proto: "client_features"),
    4: .standard(proto: "sdk_version"),
    5: .same(proto: "platform"),
    6: .same(proto: "version"),
    7: .standard(proto: "version_code"),
    8: .same(proto: "language"),
    9: .standard(proto: "device_id"),
    10: .same(proto: "diagnostics"),
    11: .standard(proto: "os_version"),
    12: .standard(proto: "os_human_version"),
    13: .standard(proto: "sdk_adapter_name"),
    14: .standard(proto: "sdk_id_adapter_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.clientFeatures) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._sdkVersion) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._platform) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._version) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._versionCode) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._language) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._deviceID) }()
      case 10: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufDouble>.self, value: &self.diagnostics) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self._osVersion) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self._osHumanVersion) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self._sdkAdapterName) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self._sdkIDAdapterName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    if !self.clientFeatures.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.clientFeatures, fieldNumber: 3)
    }
    try { if let v = self._sdkVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._platform {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._version {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._versionCode {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._language {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._deviceID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    } }()
    if !self.diagnostics.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufDouble>.self, value: self.diagnostics, fieldNumber: 10)
    }
    try { if let v = self._osVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._osHumanVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 12)
    } }()
    try { if let v = self._sdkAdapterName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 13)
    } }()
    try { if let v = self._sdkIDAdapterName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 14)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PBRequest, rhs: PBRequest) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._userID != rhs._userID {return false}
    if lhs.clientFeatures != rhs.clientFeatures {return false}
    if lhs._sdkVersion != rhs._sdkVersion {return false}
    if lhs._platform != rhs._platform {return false}
    if lhs._version != rhs._version {return false}
    if lhs._versionCode != rhs._versionCode {return false}
    if lhs._language != rhs._language {return false}
    if lhs._deviceID != rhs._deviceID {return false}
    if lhs.diagnostics != rhs.diagnostics {return false}
    if lhs._osVersion != rhs._osVersion {return false}
    if lhs._osHumanVersion != rhs._osHumanVersion {return false}
    if lhs._sdkAdapterName != rhs._sdkAdapterName {return false}
    if lhs._sdkIDAdapterName != rhs._sdkIDAdapterName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBClientFeature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ClientFeature"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PBClientFeature, rhs: PBClientFeature) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
